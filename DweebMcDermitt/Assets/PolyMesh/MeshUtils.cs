#if UNITY_EDITOR
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;

namespace LevelEditor
{
	public class MeshUtils{

		public static Mesh createWall(Vector2 scaler, List<Vector2> divides, string name)
		{
			int numdiv = divides.Count;
			int numsegs = divides.Count;
			Vector3 [] verts = new Vector3[4*numsegs*4+4];
			Vector2 [] uvs = new Vector2[4*numsegs*4+4];
			Color[] colors = new Color[4 * numsegs * 4 + 4];
			
			int[] inds = new int[6*numsegs*4+6];
			int countind = 0;
			int countvert = 0;

			Vector3 [] points = new Vector3[numdiv * 4];

			//floor
			{
				
				inds[0+countind] = 2+countvert;
				inds[1+countind] = 1+countvert;
				inds[2+countind] = 0+countvert;
				inds[3+countind] = 0+countvert;
				inds[4+countind] = 3+countvert;
				inds[5+countind] = 2+countvert;
			

				verts[0+countvert] = new Vector3(scaler.x+divides[0].x,scaler.y+divides[0].x,0);
				verts[1+countvert] = new Vector3(-scaler.x-divides[0].x,scaler.y+divides[0].x,0);
				verts[2+countvert] = new Vector3(-scaler.x-divides[0].x,-scaler.y-divides[0].x,0);
				verts[3+countvert] = new Vector3(scaler.x+divides[0].x,-scaler.y-divides[0].x,0);
				
				for (int j = 0; j < 4; ++j)
				{
					uvs[j+countvert] = new Vector2(verts[j+countvert].x, verts[j+countvert].y);
				}
				countind += 6;
				countvert += 4;
			}
			for (int i = 0; i < uvs.Length; ++i)
			{
				float temp = uvs[i].x;
				uvs[i].x = uvs[i].y;
				uvs[i].y = temp;
			}
			
			Mesh mesh = MeshUtils.makeMesh(name, verts, uvs, inds);
			mesh.colors = colors;
			return mesh;
		}
		public static void calculateMeshTangents(Mesh mesh)
		{
			//speed up math by copying the mesh arrays
			int[] triangles = mesh.triangles;
			Vector3[] vertices = mesh.vertices;
			Vector2[] uv = mesh.uv;
			Vector3[] normals = mesh.normals;
			
			//variable definitions
			int triangleCount = triangles.Length;
			int vertexCount = vertices.Length;
			
			Vector3[] tan1 = new Vector3[vertexCount];
			Vector3[] tan2 = new Vector3[vertexCount];
			
			Vector4[] tangents = new Vector4[vertexCount];
			
			for (long a = 0; a < triangleCount; a += 3)
			{
				long i1 = triangles[a + 0];
				long i2 = triangles[a + 1];
				long i3 = triangles[a + 2];
				
				Vector3 v1 = vertices[i1];
				Vector3 v2 = vertices[i2];
				Vector3 v3 = vertices[i3];
				
				Vector2 w1 = uv[i1];
				Vector2 w2 = uv[i2];
				Vector2 w3 = uv[i3];
				
				float x1 = v2.x - v1.x;
				float x2 = v3.x - v1.x;
				float y1 = v2.y - v1.y;
				float y2 = v3.y - v1.y;
				float z1 = v2.z - v1.z;
				float z2 = v3.z - v1.z;
				
				float s1 = w2.x - w1.x;
				float s2 = w3.x - w1.x;
				float t1 = w2.y - w1.y;
				float t2 = w3.y - w1.y;
				
				float r = 1.0f / (s1 * t2 - s2 * t1);
				
				Vector3 sdir = new Vector3((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
				Vector3 tdir = new Vector3((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
				
				tan1[i1] += sdir;
				tan1[i2] += sdir;
				tan1[i3] += sdir;
				
				tan2[i1] += tdir;
				tan2[i2] += tdir;
				tan2[i3] += tdir;
			}
			
			
			for (long a = 0; a < vertexCount; ++a)
			{
				Vector3 n = normals[a];
				Vector3 t = tan1[a];
				
				//Vector3 tmp = (t - n * Vector3.Dot(n, t)).normalized;
				//tangents[a] = new Vector4(tmp.x, tmp.y, tmp.z);
				Vector3.OrthoNormalize(ref n, ref t);
				tangents[a].x = t.x;
				tangents[a].y = t.y;
				tangents[a].z = t.z;
				
				tangents[a].w = (Vector3.Dot(Vector3.Cross(n, t), tan2[a]) < 0.0f) ? -1.0f : 1.0f;
			}
			
			mesh.tangents = tangents;
		}
		public static Mesh makeMesh(string name, Vector3 [] verts, Vector2[] uvs, int[] inds)
		{
			Mesh mesh = new Mesh();
			mesh.name = name;
			mesh.Clear();
			
			mesh.vertices = verts;
			mesh.uv = uvs;
			mesh.triangles = inds;
			
			mesh.Optimize();
			
			mesh.RecalculateNormals();
			mesh.RecalculateBounds();
			calculateMeshTangents(mesh);
			return mesh;
		}
		public static List<string> getTextures(Material material){
			Shader shader=material.shader;
			List<string> materials=new List<string>();
			for (int i = 0; i < ShaderUtil.GetPropertyCount(shader) ; i++) {
				if (ShaderUtil.GetPropertyType(shader,i) == ShaderUtil.ShaderPropertyType.TexEnv){
					materials.Add((ShaderUtil.GetPropertyName(shader,i)));
				}
			}
			return materials;
		}
	}
}
#endif